/*
 * This source file was generated by the Gradle 'init' task
 */
package iqw

import org.iqw.bin.Executor
import org.junit.jupiter.api.Assertions.assertTrue
import org.junit.jupiter.api.assertThrows
import kotlin.test.Test
import kotlin.test.assertEquals
import java.io.IOException


/**
 * Test class for [Executor] to verify its ability to launch an
 * external command and store the output/error
 */
class ExecutorTest {

    /**
     * Test that [Executor] can find basic system executables.
     *
     * Execute the echo command
     * @throws IOException if the command "cmd" or "echo" cannot be found.
     */
    @Test fun executorCanFindBasicCommands() {
        val executor = Executor()
        executor.execute("cmd", "/c", "echo")
    }

    /**
     * Test that [Executor] errors as predicted when commands can't be found.
     *
     * Execute a non-existent command and verify an [IOException] is thrown with
     * a predictable format.
     */
    @Test fun executorFailsWhenCantFindCommand() {
        val executor = Executor()
        val command = "not_a_command"
        val exception = assertThrows<IOException> {
            executor.execute(command)
        }

        // Verify exception is formatted correctly
        val expectedExceptionMessage = "Cannot run program \"$command\": CreateProcess error=2, The system cannot find the file specified"
        assertEquals(expectedExceptionMessage, exception.message)
    }

    /**
     * Test that [Executor] properly stores the output of a command.
     *
     * Execute an echo command and asserts that the output
     * stored in the object is as expected.
     */
    @Test fun executorProperlyStoresOutput() {
        val executor = Executor()
        executor.execute("cmd", "/c", "echo", "somewords")
        assertEquals("somewords", executor.output.trim())
    }

    /**
     * Test that [Executor] properly stores any errors associated with the external process.
     *
     * Execute a systeminfo command with an incorrect flag. Assert
     * that an IOException is thrown and that the captured
     * error of expected format.
     */
    @Test fun executorProperlyStoresError() {
        val executor = Executor()
        val incorrectFlag = "NotACorrectOption"
        assertThrows<IOException> {
            executor.execute("cmd", "/c", "systeminfo", "/fo", incorrectFlag)
        }

        val expectedError = "ERROR: Invalid syntax. '$incorrectFlag' value is not allowed for '/fo' option."
        assertTrue(executor.error.contains(expectedError))
    }

}
